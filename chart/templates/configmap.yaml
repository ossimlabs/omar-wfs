apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ include "omar-wfs.fullname" . }}"
  labels:
    {{- include "omar-wfs.labels" . | nindent 4 }}
data:
  application.yaml: |-
    about:
      contactEmail: Kevin.Naquin@maxar.com
      releaseName: HystericalHyena
      releaseNumber: 1.0.0

    baseUrl: ${serverProtocol}://${serverName}

    omar:
      wfs:
        includeNumberMatched: false
        app:
          geoscript:
            # The url endpoint for the omar-geoscript service
            url: http://omar-geoscript:8080/omar-geoscript/geoscriptApi

    endpoints:
      enabled: true
      health:
        enabled: true
      actuator:
        sensitive: false
      beans:
        sensitive: false
      metrics:
        sensitive: false
      configprops:
        sensitive: false
      trace:
        sensitive: false
      mappings:
        sensitive: false
      env:
        sensitive: false
      loggers:
        sensitive: false

    environments:
      production:
        dataSource:
          dbCreate: update

    # eureka:
    #   client:
    #     serviceUrl:
    #       defaultZone: http://omar-eureka-server:8761/omar-eureka-server/eureka/
    #   instance:
    #     leaseRenewalIntervalInSeconds: 1
    #     leaseExpirationDurationInSeconds: 2
    #     preferIpAddress: true
    #     statusPageUrlPath: ${server.contextPath}/info
    #     homePageUrlPath: ${server.contextPath}
    #     healthCheckUrlPath: ${server.contextPath}/health

    grails:
      serverURL: ${serverProtocol}://${serverName}${server.contextPath}

    hystrix:
      execution:
        timeout:
          enabled: false
      fallback:
        enabled: false

    logging:
      level:
        avro.app: ${loggingLevel}
        sqs.app: ${loggingLevel}
        stager.app: ${loggingLevel}
        omar.avro: ${loggingLevel}
        omar.eureka: ${loggingLevel}
        omar.geoscript: ${loggingLevel}
        omar.oms: ${loggingLevel}
        omar.raster: ${loggingLevel}
        omar.stager: ${loggingLevel}
        omar.sqs: ${loggingLevel}
        omar.wcs: ${loggingLevel}
        omar.wfs: ${loggingLevel}
        omar.wms: ${loggingLevel}
        omar.wmts: ${loggingLevel}

    loggingLevel: DEBUG

    omarDb:
      host: {{ .Values.global.omarDb.host }}
      username: {{ .Values.global.omarDb.user }}
      password: {{ .Values.global.omarDb.password }}
      name: {{ .Values.global.omarDb.name }}
      port: {{ .Values.global.omarDb.port }}
      driver: org.postgresql.Driver
      dialect: 'org.hibernate.spatial.dialect.postgis.PostgisDialect'
      url: jdbc:postgresql://${omarDb.host}:${omarDb.port}/${omarDb.name}

    security:
      user:
        name: omar #username to authenticate for Spring Boot Admin
        password: omarftw123 #Password to authenticate for Spring Boot Admin

    securityClassification:
      backgroundColor: green
      classification: UNCLASSIFIED
      textColor: white

    serverDomain: ossim.io
    serverName: {{ .Values.global.hostname }}
    serverNamePki: pki-omar.${serverDomain}

    serverProtocol: https

    # spring:
      # boot:
      #   admin:
      #     url: http://omar-admin-server:8080/omar-admin-server/
      #     auto-deregistration: true
      #     client:
      #       prefer-ip: true
      #     username: omar #Client app username for Spring Boot Admin
      #     password: omarftw123 #Client app password for Spring Boot Admin

    swagger:
      validatorUrl: null
      info:
        title: ${info.app.name} API
        version: ${info.app.version}
        contact:
          name: "Maxar"
          url: http://overview.${serverDomain}
          email: "kurt.feldbush@maxar.com"
        license:
          name: "Licensed under MIT"
          url: "https://opensource.org/licenses/MIT"

    userInfo:
      requestHeaderUserName: username
      requestHeaderUserNameDefault: Anonymous

    server:
      servlet:
        context-path: /omar-wfs
      contextPath: ${server.servlet.context-path}
